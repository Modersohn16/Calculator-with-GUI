# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calculatorGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from re import match

from PyQt5 import QtCore, QtGui, QtWidgets
import math


class Ui_MainWindow(object):
    textCal = ""
    number1 = ""
    number2 = ""
    sign = ""
    firstSign = False
    secondSign = False
    firstSignSymbol = ""
    result = 0
    # signBlock will prevent user from entering multiple signs
    signBlock = True
    isNegative = False
    isEqualsSign = False
    isCalculationDone = False
    isSquareSign = False
    isRootSign = False
    signBlockMinus = False
    dotBlock = False

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(261, 344)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(20, 110, 41, 41))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.click()

        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(80, 110, 41, 41))
        self.pushButton_8.setObjectName("pushButton_8")

        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(140, 110, 41, 41))
        self.pushButton_9.setObjectName("pushButton_9")

        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(20, 160, 41, 41))
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(80, 160, 41, 41))
        self.pushButton_5.setObjectName("pushButton_5")

        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(140, 160, 41, 41))
        self.pushButton_6.setObjectName("pushButton_6")

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(80, 210, 41, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(140, 210, 41, 41))
        self.pushButton_3.setObjectName("pushButton_3")

        self.pushButton_1 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_1.setGeometry(QtCore.QRect(20, 210, 41, 41))
        self.pushButton_1.setObjectName("pushButton_1")

        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(140, 260, 41, 41))
        self.pushButton_10.setObjectName("pushButton_10")

        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(20, 260, 41, 41))
        self.pushButton_11.setObjectName("pushButton_11")

        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(80, 260, 41, 41))
        self.pushButton_12.setObjectName("pushButton_12")

        self.pushButton_multiplicate = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_multiplicate.setGeometry(QtCore.QRect(200, 260, 41, 41))
        self.pushButton_multiplicate.setObjectName("pushButton_multiplicate")

        self.pushButton_minus = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_minus.setGeometry(QtCore.QRect(200, 160, 41, 41))
        self.pushButton_minus.setObjectName("pushButton_minus")

        self.pushButton_divide = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_divide.setGeometry(QtCore.QRect(200, 210, 41, 41))
        self.pushButton_divide.setObjectName("pushButton_divide")

        self.pushButton_plus = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_plus.setGeometry(QtCore.QRect(200, 110, 41, 41))
        self.pushButton_plus.setObjectName("pushButton_plus")

        self.pushButton_root = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_root.setGeometry(QtCore.QRect(20, 60, 41, 41))
        self.pushButton_root.setObjectName("pushButton_root")

        self.pushButton_clear = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_clear.setGeometry(QtCore.QRect(200, 60, 41, 41))
        self.pushButton_clear.setObjectName("pushButton_clear")

        self.pushButton_square = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_square.setGeometry(QtCore.QRect(80, 60, 41, 41))
        self.pushButton_square.setObjectName("pushButton_square")

        self.pushButton_back = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_back.setGeometry(QtCore.QRect(140, 60, 41, 41))
        self.pushButton_back.setObjectName("pushButton_back")

        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(20, 10, 221, 41))
        self.textEdit.setObjectName("textEdit")

        # buttons - On click
        self.pushButton_1.clicked.connect(lambda: self.setNum("1"))
        self.pushButton_2.clicked.connect(lambda: self.setNum("2"))
        self.pushButton_3.clicked.connect(lambda: self.setNum("3"))
        self.pushButton_4.clicked.connect(lambda: self.setNum("4"))
        self.pushButton_5.clicked.connect(lambda: self.setNum("5"))
        self.pushButton_6.clicked.connect(lambda: self.setNum("6"))
        self.pushButton_7.clicked.connect(lambda: self.setNum("7"))
        self.pushButton_8.clicked.connect(lambda: self.setNum("8"))
        self.pushButton_9.clicked.connect(lambda: self.setNum("9"))
        self.pushButton_11.clicked.connect(lambda: self.setNum("0"))
        self.pushButton_12.clicked.connect(lambda: self.setNum("."))

        self.pushButton_minus.clicked.connect(lambda: self.signPressed("-"))
        self.pushButton_plus.clicked.connect(lambda: self.signPressed("+"))
        self.pushButton_multiplicate.clicked.connect(lambda: self.signPressed("×"))
        self.pushButton_divide.clicked.connect(lambda: self.signPressed("÷"))
        self.pushButton_10.clicked.connect(lambda: self.signPressed("="))
        self.pushButton_square.clicked.connect(lambda: self.signPressed("²"))
        self.pushButton_root.clicked.connect(lambda: self.signPressed("√"))

        self.pushButton_clear.clicked.connect(lambda: self.clearButton())
        self.pushButton_back.clicked.connect(lambda: self.back())

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 261, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    # when button is clicked, number (or ".") is shown in the TextEditor window.
    # signBlock prevents writing multiple signs (ex. "+")
    # dotBlock prevents writing multiple "." in a number
    # isCalculationDone enables alternative flow after getting result. (When number is pressed,
    # it deletes the result and starts new number. When sign is pressed, result is not deleted.
    def setNum(self, num):
        if self.isCalculationDone == False:
            if num != ".":
                self.textCal += num;
            else:
                if self.dotBlock == False:
                    self.textCal += num;
                    self.dotBlock = True
        elif self.isCalculationDone and num != ".":
            print("reset when isCalcDone")
            self.textCal = num;
            self.isCalculationDone = False
        elif self.isCalculationDone and num == ".":
            if self.dotBlock == False:
                self.textCal += num;
                self.dotBlock = True
                self.isCalculationDone = False

        self.textEdit.clear();
        self.textEdit.insertPlainText(self.textCal);
        self.signBlock = False
        self.signBlockMinus = True

    # after pressing "²" and "√" calculation is done and result is shown immediately.
    # If there are two numbers (ex. 12 + 155²) - only the second number is squared ² (or √)
    # adding a second sign (not including - sign indicating a negative number) like in example:
    # 14 + 14 + would result in automatic calculation and result would be shown
    # with preserving the other sign (28 +)
    def signPressed(self, sign):
        self.isCalculationDone = False
        self.dotBlock = False

        # case for negative numbers
        if self.firstSign == False and sign == "-" and self.signBlockMinus == False:
            self.textCal += sign;
            self.textEdit.clear();
            self.textEdit.insertPlainText(self.textCal);
            self.signBlockMinus = True

        if self.signBlock == False:
            if sign == "=":
                self.isEqualsSign = True
            elif sign == "²":
                self.isSquareSign = True
            elif sign == "√":
                self.isRootSign = True

            if self.firstSign == True:
                self.secondSign = True
            if self.isEqualsSign == False and self.isSquareSign == False and self.isRootSign == False:
                self.firstSign = True
                self.signBlock = True
                print("sign blocked")

            if self.secondSign == False and self.isEqualsSign == False and self.isSquareSign == False and self.isRootSign == False:
                self.firstSignSymbol = sign
                self.textCal += sign;
                self.textEdit.clear();
                self.textEdit.insertPlainText(self.textCal);

            elif self.secondSign == False and self.isEqualsSign == False and self.isSquareSign == True and self.isRootSign == False:
                print(" elif self.secondSign == False and self.isEqualsSign == False and self.isSquareSign == True:")
                num = float(self.textCal)
                num = num*num
                num = self.formatNumber(num)
                self.textCal = str(num)
                self.textEdit.clear()
                self.textEdit.insertPlainText(self.textCal)
                self.isSquareSign = False

            elif self.secondSign == False and self.isEqualsSign == False and self.isSquareSign == False and self.isRootSign == True:
                print(" elif self.secondSign == False and self.isEqualsSign == False and self.isSquareSign == False and self.isRootSign == True:")
                num = float(self.textCal)
                num = math.sqrt(num)
                num = self.formatNumber(num)
                self.textCal = str(num)
                self.textEdit.clear()
                self.textEdit.insertPlainText(self.textCal)
                self.isRootSign = False

            # calculations and result shown automatically after pressing second sign
            if self.secondSign and self.isEqualsSign == False:
                print("self.secondSign and self.isEqualsSign == False:")
                self.calculate()
                self.textEdit.clear()
                self.textCal = str(self.result)
                self.textCal += sign
                self.textEdit.insertPlainText(self.textCal);
                self.firstSign = True
                self.secondSign = False
                self.firstSignSymbol = sign
                # in order to prevent pressing multiple signs in a row
                self.signBlock = True
                print("sign blocked")
                # self.isCalculationDone = True
            # if equals sign was pressed
            elif self.firstSign and self.isEqualsSign:
                print(" elif self.isEqualsSign:")
                self.calculate()
                self.textEdit.clear()
                self.textCal = str(self.result)
                self.textEdit.insertPlainText(self.textCal);
                self.firstSign = False
                self.secondSign = False
                self.firstSignSymbol = None
                self.isEqualsSign = False
                self.isCalculationDone = True
                self.signBlockMinus = True
        if sign == "=":
            self.isEqualsSign = False

    # clears all text and resets variables
    def clearButton(self):
        self.textEdit.clear()
        self.firstSign = False
        self.secondSign = False
        self.isEqualsSign = False
        self.firstSignSymbol = None
        self.textCal = ""
        self.isNegative = False
        self.signBlock = True
        self.signBlockMinus = False
        self.dotBlock = False

    def calculate(self):
        if self.textCal[0] == "-" and self.firstSignSymbol == "-":
            self.isNegative = True
        x = self.textCal.split(self.firstSignSymbol)

        # if x is not empty
        if len(x) != 0:
            if self.isNegative:
                print(self.textCal.split(self.firstSignSymbol))
                num1 = x[1]
                num2 = x[2]
            else:
                num1 = x[0]
                num2 = x[1]

            num1 = float(num1)
            num2 = float(num2)
            if self.isNegative:
                num1 = -num1
                self.isNegative = False
            print("num 1 is ", num1)
            print("num 2 is ", num2)
        # case where second sign is square sign, then 2nd number^2
        if self.isSquareSign:
            num2 = num2 * num2
            self.isSquareSign = False
            print("num2 is squared. num 2 squared: ", num2)
        if self.isRootSign:
            num2 = math.sqrt(num2)
            self.isRootSign = False
            print("square root of num 2: ", num2)
        if self.firstSignSymbol == "+":
            self.result = num1 + num2
        elif self.firstSignSymbol == "-":
            self.result = num1 - num2
        elif self.firstSignSymbol == "÷":
            self.result = num1 / num2
        elif self.firstSignSymbol == "×":
            self.result = num1 * num2
        else:
            print("Error. Something went wrong");
        self.result = self.formatNumber(self.result)
        # to prevent adding multiple dots to result
        if self.result % 1 != 0:
            self.dotBlock = True

    # ex. makes 12.0 into 12.
    # If result is a whole number, returns an integer.
    def formatNumber(self, num):
        if num % 1 == 0:
            return int(num)
        else:
            return num

    # deletes last character from a string shown in textEditor. Resets booleans.
    def back(self):
        self.textEdit.clear();
        if self.textCal[:-1].isnumeric() or self.textCal[:-1] == ".":
            self.textCal = self.textCal[:-1];
            self.textEdit.insertPlainText(self.textCal);
        else:
            self.textCal = self.textCal[:-1];
            self.firstSign = False
            self.firstSignSymbol = None
            self.signBlock = False
            self.textEdit.insertPlainText(self.textCal);


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fancy Calculator"))
        self.pushButton_7.setText(_translate("MainWindow", "7"))
        self.pushButton_8.setText(_translate("MainWindow", "8"))
        self.pushButton_9.setText(_translate("MainWindow", "9"))
        self.pushButton_4.setText(_translate("MainWindow", "4"))
        self.pushButton_5.setText(_translate("MainWindow", "5"))
        self.pushButton_6.setText(_translate("MainWindow", "6"))
        self.pushButton_2.setText(_translate("MainWindow", "2"))
        self.pushButton_3.setText(_translate("MainWindow", "3"))
        self.pushButton_1.setText(_translate("MainWindow", "1"))
        self.pushButton_10.setText(_translate("MainWindow", "="))
        self.pushButton_11.setText(_translate("MainWindow", "0"))
        self.pushButton_12.setText(_translate("MainWindow", "."))
        self.pushButton_multiplicate.setText(_translate("MainWindow", "×"))
        self.pushButton_minus.setText(_translate("MainWindow", "-"))
        self.pushButton_divide.setText(_translate("MainWindow", "÷"))
        self.pushButton_plus.setText(_translate("MainWindow", "+"))
        self.pushButton_root.setText(_translate("MainWindow", "√x"))
        self.pushButton_clear.setText(_translate("MainWindow", "clear"))
        self.pushButton_square.setText(_translate("MainWindow", "x²"))
        self.pushButton_back.setText(_translate("MainWindow", "back"))
        self.textEdit.setPlainText(_translate("MainWindow", ""))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.textEdit.setFontPointSize(14)
    MainWindow.show()
    sys.exit(app.exec_())
